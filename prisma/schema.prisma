generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

enum UserRole {
  Buyer
  Deliverer
  Seller
}

enum OrderStatus {
  Ordered
  Packaged
  InDelivery
  Received
  Returned
}

enum Currency {
  RSD
}

enum PaymentMethod {
  OnDelivery
  PayPal
}

model User {
  id               Int      @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String   @unique
  password         String
  address          String   @default("")
  addressLatitude  Decimal?
  addressLongitude Decimal?
  phoneNumber      String?
  role             UserRole
  profilePicture   String?
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())

  buyer     Buyer?
  seller    Seller?
  deliverer Deliverer?
  replies   Reply[]

  @@map("users")
}

model Buyer {
  id            Int           @id @default(autoincrement())
  userId        Int           @unique
  paymentMethod PaymentMethod @default(OnDelivery)
  updatedAt     DateTime      @updatedAt
  createdAt     DateTime      @default(now())

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]

  @@map("buyers")
}

model Deliverer {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  pricePerKilometer Decimal
  currency          Currency @default(RSD)
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]

  @@map("deliverers")
}

model Seller {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id])
  products Product[]

  @@map("sellers")
}

model Order {
  id          Int         @id @default(autoincrement())
  productId   Int
  buyerId     Int
  received    Boolean     @default(false)
  status      OrderStatus @default(Ordered)
  delivererId Int
  updatedAt   DateTime    @updatedAt
  createdAt   DateTime    @default(now())

  buyer     Buyer     @relation(fields: [buyerId], references: [id])
  deliverer Deliverer @relation(fields: [delivererId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@map("orders")
}

model Product {
  id           Int      @id @default(autoincrement())
  sellerId     Int
  title        String   @default("")
  desc         String   @default("")
  price        Decimal
  categoryId   Int
  thumbnailKey String   @unique
  currency     Currency @default(RSD)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  owner     Seller     @relation(fields: [sellerId], references: [id])
  category  Category   @relation(fields: [categoryId], references: [id])
  discounts Discount[]
  Order     Order[]

  @@map("products")
}

model Discount {
  id         Int      @id @default(autoincrement())
  productId  Int
  percentage Decimal  @default(0)
  untilDate  DateTime
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])

  @@map("discounts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  replies   Reply[]

  @@map("comments")
}

model Reply {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  commentId Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])
}

model Category {
  id               Int      @id @default(autoincrement())
  name             String
  parentCategoryId Int?
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())

  subCategories  Category[] @relation(name: "category_has_subcategory")
  parentCategory Category?  @relation(name: "category_has_subcategory", fields: [parentCategoryId], references: [id])
  products       Product[]
}

model Media {
  id        Int      @id @default(autoincrement())
  blob      Bytes    @db.ByteA
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
